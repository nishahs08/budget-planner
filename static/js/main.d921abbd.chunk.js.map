{"version":3,"sources":["components/Start/Start.jsx","components/Header.jsx","components/Chart.jsx","components/AddTransaction.jsx","components/Transaction.jsx","components/CollapsibleBar.jsx","components/TransactionsContainer.jsx","components/EditTransactionDialog.jsx","App.js","serviceWorker.js","index.js"],"names":["Start","props","budget","setBudget","useState","localBudget","setLocalBudget","budgetError","setBudgetError","className","FormControl","Input","id","value","onChange","e","parseInt","target","name","aria-describedby","FormHelperText","error","Button","variant","onClick","month","Date","getMonth","Number","isNaN","console","log","Header","transactions","thisDate","expense","reduce","sum","t","spent","Paper","elevation","style","width","height","marginTop","background","Typography","getFullYear","color","undefined","ChartComponent","totalSpent","transaction","data","description","backgroundColor","margin","valueField","argumentField","innerRadius","AddTransaction","note","setNote","setSpent","NoteError","setNoteError","SpentError","setSpentError","handleClick","errorNote","errorSpent","isError","length","validate","newRecord","spentOn","now","addTransaction","padding","Grid","container","spacing","justify","item","md","lg","InputLabel","htmlFor","Transaction","updateTransaction","index","CollapsibleBar","dateString","backgroundImage","alignItems","map","key","TransactionsContainer","groupedTransactions","Object","keys","EditTransactionDialog","isOpen","handleClose","setEditingTransaction","noteError","spentError","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","xs","DialogActions","_transaction","App","JSON","parse","localStorage","getItem","setTransactions","editingTransaction","thisMonthKey","getDate","group","td","groupingKey","push","justifyContent","sm","textAlign","newTransactions","setItem","stringify","marginBottom","newTransaction","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d921abbd.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Start.scss';\nimport { Button, Input, FormHelperText, FormControl } from \"@material-ui/core\";\nimport { useState } from 'react';\n\nexport default function Start(props) {\n\tconst { budget, setBudget } = props;\n\tconst [localBudget, setLocalBudget] = useState(budget);\n\tconst [budgetError, setBudgetError] = useState(\"\");\n\n\tconst handleClick = (e) => {\n\t\tlet month = new Date().getMonth();\n\t\tsetBudgetError(\"\");\n\t\tif (Number.isNaN(localBudget) === false && localBudget > 0) {\n\t\t\tconsole.log(\"is number\", localBudget, month);\n\t\t\tsetBudget(localBudget);\n\t\t}\n\t\telse {\n\t\t\tsetBudgetError(\"Budget should be a number greater than 0 \");\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"container--sub\">\n\t\t\t\t<div className=\"container--sub__1\">\n\t\t\t\t\tI swear I won't fucking spend more than\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tid=\"component-simple\"\n\t\t\t\t\t\t\t\tvalue={localBudget}\n\t\t\t\t\t\t\t\tonChange={e => setLocalBudget(parseInt(e.target.value))}\n\t\t\t\t\t\t\t\tname=\"budget\"\n\t\t\t\t\t\t\t\taria-describedby=\"component-error-text\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<FormHelperText id=\"component-error-text\" error={!!budgetError}>\n\t\t\t\t\t\t\t\t{budgetError}\n\t\t\t\t\t\t\t</FormHelperText>\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t</span> this month.\n\t\t\t\t\t</div>\n\t\t\t\t<div className=\"container--sub__2\">\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<Button variant=\"contained\" onClick={handleClick}>\n\t\t\t\t\t\t\tLets Plan\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","\nimport React from \"react\";\nimport { Typography, Paper } from \"@material-ui/core\";\nexport default function Header(props) {\n\tconst { budget, transactions } = props;\n\tconst thisDate = new Date();\n\tconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\tconst expense = transactions.reduce((sum, t) => sum + t.spent, 0);\n\treturn (\n\t\t<Paper elevation={0} style={{ width: \"98%\", height: \"100px\", marginTop: \"20px\", background: 'transparent' }}>\n\t\t\t<Typography variant=\"h5\">\n\t\t\t\t{months[thisDate.getMonth() + 1]} of fucking {thisDate.getFullYear()}\n\t\t\t</Typography>\n\t\t\t<Typography variant=\"h5\">\n\t\t\t\tYou fucking planned to spend <span>{budget} </span>this month\n            </Typography>\n\t\t\t<Typography variant=\"h5\" style={{ color: expense > (budget/2) ? 'red' : undefined }}>\n\t\t\t\tYou have already spent <span>{expense}</span>\n\t\t\t</Typography>\n\t\t</Paper>\n\t)\n}","import  React from \"react\";\nimport { Chart, PieSeries } from \"@devexpress/dx-react-chart-material-ui\";\nimport { Animation } from \"@devexpress/dx-react-chart\";\nimport { Paper } from '@material-ui/core';\n\n\nexport default function ChartComponent(props) {\n\tconst totalSpent = props.transactions.reduce((sum,transaction)=>sum+transaction.spent,0);\n\tconst data = [\n\t\t{description:\"budget\", value:props.budget || 90},\n\t\t{description:\"expenditure\",value:totalSpent}\n\t]\n\treturn (\n\t\t<Paper elevation={0} style={{ backgroundColor: \"transparent\", width: \"110px\", height: \"100px\", marginTop: \"20px\" }}>\n\t\t\t<Chart width={100} height={100} data={data} style={{ margin: \"auto\" }}>\n\t\t\t\t<PieSeries valueField=\"value\" argumentField=\"description\" innerRadius={0.5} />\n\t\t\t\t<Animation />\n\t\t\t</Chart>\n\t\t</Paper>\n\t);\n}\n","import React, { useState } from \"react\";\nimport {\n\tPaper,\n\tGrid,\n\tFormControl,\n\tInputLabel,\n\tFormHelperText,\n\tInput,\n\tButton\n} from \"@material-ui/core\";\n\nexport default function AddTransaction(props) {\n\tlet [note, setNote] = useState(\"\");\n\tlet [spent, setSpent] = useState(\"\");\n\tlet [NoteError, setNoteError] = useState(\"\");\n\tlet [SpentError, setSpentError] = useState(\"\");\n\n\tconst validate = () => {\n\n\t\tlet errorNote = \"\";\n\t\tlet errorSpent = \"\";\n\n\t\tlet isError = false;\n\t\tif (Number.isNaN(parseInt(spent)) || parseInt(spent) < 0) {\n\t\t\tisError = true;\n\t\t\terrorSpent = \"Enter only amount spent\";\n\t\t}\n\n\t\tif (note.length <= 0) {\n\t\t\tisError = true;\n\t\t\terrorNote = \"Enter note related to expenditure eg. tea , grocery \";\n\t\t}\n\n\t\tsetNoteError(errorNote);\n\t\tsetSpentError(errorSpent);\n\t\treturn isError;\n\t}\n\n\tconst handleClick = () => {\n\t\tsetSpentError(\"\");\n\t\tsetNoteError(\"\");\n\n\t\tlet error = validate();\n\t\tif (!error) {\n\t\t\tlet newRecord = {\n\t\t\t\tspentOn: Date.now(),\n\t\t\t\tspent: parseInt(spent),\n\t\t\t\tnote: note,\n\t\t\t\tid: Date.now()\n\t\t\t};\n\t\t\tsetNote(\"\");\n\t\t\tsetSpent(\"\");\n\n\t\t\tprops.addTransaction(newRecord);\n\t\t}\n\t}\n\n\treturn (\n\t\t<Paper\n\t\t\televation={0}\n\t\t\tstyle={{ width: \"100%\", padding: \"2px\", backgroundColor: \"transparent\" }}\n\t\t>\n\t\t\t<Grid container spacing={3} justify=\"center\">\n\t\t\t\t<Grid item md={3} lg={1}>\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<InputLabel htmlFor=\"component-simple\">Note</InputLabel>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tid=\"component-simple\"\n\t\t\t\t\t\t\tvalue={note}\n\t\t\t\t\t\t\tname=\"note\"\n\t\t\t\t\t\t\tonChange={(e) => setNote(e.target.value)}\n\t\t\t\t\t\t\taria-describedby=\"component-error-text\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormHelperText id=\"component-error-text\" error={!!NoteError}>\n\t\t\t\t\t\t\t{NoteError}\n\t\t\t\t\t\t</FormHelperText>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item>\n\t\t\t\t\t<FormControl md={3} lg={2}>\n\t\t\t\t\t\t<InputLabel htmlFor=\"component-simple\">Spent</InputLabel>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tid=\"component-simple\"\n\t\t\t\t\t\t\tvalue={spent}\n\t\t\t\t\t\t\tname=\"spent\"\n\t\t\t\t\t\t\tonChange={(e) => setSpent(e.target.value)}\n\t\t\t\t\t\t\taria-describedby=\"component-error-text\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormHelperText id=\"component-error-text\" error={!!SpentError}>\n\t\t\t\t\t\t\t{NoteError}\n\t\t\t\t\t\t</FormHelperText>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item md={3} lg={3} style={{}}>\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<Button variant=\"contained\" style={{ marginTop: \"17px\" }} onClick={() => handleClick()}>\n\t\t\t\t\t\t\tTrack\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Paper>\n\t);\n}\n","import React from 'react';\nimport {\n\tTypography,\n\tGrid\n} from \"@material-ui/core\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\n\nexport default function Transaction(props) {\n\tconst { transaction, updateTransaction } = props;\n\treturn (\n\t\t<Grid\n\t\t\tcontainer\n\t\t\tlg={12}\n\t\t\tmd={12}\n\t\t\tjustify=\"space-between\"\n\t\t\tstyle={{\n\t\t\t\tpadding: \"5px\",\n\t\t\t\tbackgroundColor: props.index % 2 === 0 ? \"#cfd8dc\" : \"#eceff1\",\n\t\t\t\tcolor: \"#37474f\"\n\t\t\t}}\n\t\t>\n\t\t\t<Grid item md={2} lg={2}>\n\t\t\t\t<Typography>\n\t\t\t\t\t<span onClick={() => updateTransaction(transaction)}>\n\t\t\t\t\t\t<EditOutlinedIcon />\n\t\t\t\t\t</span>\n\t\t\t\t\t{transaction.note}\n\t\t\t\t</Typography>\n\t\t\t</Grid>\n\t\t\t<Grid item md={2} lg={2} >\n\t\t\t\t<Typography>{transaction.spent}</Typography>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n}","import React from 'react';\nimport Transaction from './Transaction';\nimport { Grid, Typography } from '@material-ui/core';\n\nexport default function CollapsibleBar(props) {\n\tconst { dateString, transactions, updateTransaction } = props;\n\treturn (\n\t\t<>\n\t\t\t<Grid\n\t\t\t\tcontainer\n\t\t\t\tlg={12}\n\t\t\t\tmd={12}\n\t\t\t\tjustify=\"space-between\"\n\t\t\t\tstyle={{\n\t\t\t\t\tpadding: \"5px\",\n\t\t\t\t\tcolor: \"#f4f6f8\",\n\t\t\t\t\tbackgroundImage: \"linear-gradient(to right bottom,#263238,#546e7a)\",\n\t\t\t\t\tmarginTop: \"30px\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Grid item md={2} lg={2}>\n\t\t\t\t\t<Typography>\n\t\t\t\t\t\t<span style={{ margin: \"5px\" }}>+</span>{dateString}\n\t\t\t\t\t</Typography>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item md={2} lg={2} alignItems=\"center\">\n\t\t\t\t\t<Typography>TOTAL EXPENSE: {transactions.reduce((sum, t) => sum = sum + t.spent, 0)}</Typography>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t\t{transactions.map((transaction, index) => <Transaction\n\t\t\t\tkey={index}\n\t\t\t\tindex={index}\n\t\t\t\ttransaction={transaction}\n\t\t\t\tupdateTransaction={updateTransaction}\n\t\t\t/>)}\n\t\t</>\n\t)\n}","import React from 'react';\nimport CollapsibleBar from './CollapsibleBar';\n\nexport default function TransactionsContainer(props) {\n\tconst { groupedTransactions, updateTransaction } = props;\n\n\treturn Object\n\t\t.keys(groupedTransactions)\n\t\t.map((dateString, index) => <CollapsibleBar\n\t\t\tkey={dateString}\n\t\t\tdateString={dateString}\n\t\t\ttransactions={groupedTransactions[dateString]}\n\t\t\tupdateTransaction={updateTransaction}\n\t\t/>);\n}","import React, {useState} from 'react';\nimport {\n\tButton,\n\tPaper,\n\tTypography,\n\tInput,\n\tFormHelperText,\n\tFormControl,\n\tInputLabel,\n\tGrid,\n\tDialog,\n\tDialogActions,\n\tDialogContent,\n\tDialogContentText,\n\tDialogTitle\n} from \"@material-ui/core\";\n\nexport default function EditTransactionDialog(props) {\n\t/** Props */\n\tconst { isOpen, handleClose, transaction, setEditingTransaction, updateTransaction } = props;\n\t\n\t/** State */\n\tconst [noteError, setNoteError] = useState(\"\");\n\tconst [spentError, setSpentError] = useState(\"\");\n\n\t/** Helpers */\n\tconst validate = () => {\n\n\t\tlet errorNote = \"\";\n\t\tlet errorSpent = \"\";\n\n\t\tlet isError = false;\n\t\tif (Number.isNaN(parseInt(transaction.spent)) || parseInt(transaction.spent) < 0) {\n\t\t\tisError = true;\n\t\t\terrorSpent = \"Enter only amount spent\";\n\t\t}\n\n\t\tif (transaction.note.length <= 0) {\n\t\t\tisError = true;\n\t\t\terrorNote = \"Enter note related to expenditure eg. tea , grocery \";\n\t\t}\n\n\t\tsetNoteError(errorNote);\n\t\tsetSpentError(errorSpent);\n\t\treturn isError;\n\t};\n\n\tconst handleClick = () => {\n\t\tsetSpentError(\"\");\n\t\tsetNoteError(\"\");\n\n\t\tlet error = validate();\n\t\tif (!error) {\n\t\t\tconst _transaction = transaction;\n\t\t\tsetEditingTransaction(null);\n\t\t\tupdateTransaction(_transaction);\n\t\t}\n\t}\n\n\t/** Render */\n\treturn (\n\t\t<Dialog\n\t\t\topen={isOpen}\n\t\t\tonClose={handleClose}\n\t\t\taria-labelledby=\"form-dialog-title\"\n\t\t>\n\t\t\t<DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle>\n\t\t\t<DialogContent>\n\t\t\t\t<DialogContentText>Edit</DialogContentText>\n\t\t\t\t<Grid item xs>\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<InputLabel htmlFor=\"component-simple\">Note</InputLabel>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tid=\"component-simple\"\n\t\t\t\t\t\t\tvalue={transaction.note}\n\t\t\t\t\t\t\tonChange={(e) => setEditingTransaction({\n\t\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\t\tnote: e.target.value\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\tname=\"noteEdit\"\n\t\t\t\t\t\t\taria-describedby=\"component-error-text\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormHelperText id=\"component-error-text\" error={!!noteError}>\n\t\t\t\t\t\t\t{noteError}\n\t\t\t\t\t\t</FormHelperText>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\n\t\t\t\t<Grid item xs>\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<InputLabel htmlFor=\"component-simple\">Spent</InputLabel>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tid=\"component-simple\"\n\t\t\t\t\t\t\tvalue={transaction.spent}\n\t\t\t\t\t\t\tonChange={(e) => setEditingTransaction({\n\t\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\t\tspent: parseInt(e.target.value)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\tname=\"spentEdit\"\n\t\t\t\t\t\t\taria-describedby=\"component-error-text\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormHelperText id=\"component-error-text\" error={!!spentError}>\n\t\t\t\t\t\t\t{spentError}\n\t\t\t\t\t\t</FormHelperText>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\t\t\t</DialogContent>\n\t\t\t<DialogActions>\n\t\t\t\t<Button onClick={handleClose} color=\"primary\">\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t\t<Button onClick={handleClick} color=\"primary\">\n\t\t\t\t\tChange\n\t\t\t\t</Button>\n\t\t\t</DialogActions>\n\t\t</Dialog>\n\t);\n}","import React, { useState } from 'react';\n\nimport Start from './components/Start/Start';\nimport Header from './components/Header';\nimport Chart from './components/Chart';\nimport AddTransaction from './components/AddTransaction';\nimport TransactionsContainer from './components/TransactionsContainer';\nimport EditTransactionDialog from './components/EditTransactionDialog';\n\nimport { Grid} from '@material-ui/core';\n\nexport default function App() {\n\t/** State */\n\tconst [transactions, setTransactions] = useState(JSON.parse(localStorage.getItem('transactions')) || []);\n\tconst [budget, setBudget] = useState(parseInt(localStorage.getItem('budget')) || null);\n\tconst [editingTransaction, setEditingTransaction] = useState(null);\n\n\t/** Helper variables */\n\tconst thisMonthKey = `${(new Date()).getDate()}-${(new Date()).getMonth() + 1}-${(new Date()).getFullYear()}`;\n\tconst groupedTransactions = transactions.reduce((group, transaction) => {\n\t\tconst td = new Date(transaction.spentOn);\n\t\tconst groupingKey = `${td.getDate()}-${td.getMonth() + 1}-${td.getFullYear()}`;\n\t\tif (!group[groupingKey]) {\n\t\t\tgroup[groupingKey] = [transaction];\n\t\t} else {\n\t\t\tgroup[groupingKey].push(transaction);\n\t\t}\n\t\treturn group;\n\t}, {});\n\n\t/** Helper Methods */\n\tconst addTransaction = (transaction) => {\n\t\tconst newTransactions = [...transactions, transaction];\n\t\tlocalStorage.setItem('transactions', JSON.stringify(newTransactions));\n\t\tsetTransactions(newTransactions);\n\t};\n\n\tconst updateTransaction = (updatedTransaction) => {\n\t\tconst newTransactions = transactions.map(transaction => {\n\t\t\tif (transaction.id !== updatedTransaction.id) return transaction;\n\t\t\treturn updatedTransaction;\n\t\t});\n\t\tlocalStorage.setItem('transactions', JSON.stringify(newTransactions));\n\t\tsetTransactions(newTransactions);\n\t}\n\t\n\t/** Render */\n\treturn (\n\t\t!budget\n\t\t? <Start budget={budget} setBudget={budget => {\n\t\t\tlocalStorage.setItem('budget', budget);\n\t\t\tsetBudget(budget);\n\t\t}} />\n\t\t: <Grid\n\t\t\tcontainer\n\t\t\tcolor=\"primary\"\n\t\t\tstyle={{\n\t\t\t\tjustifyContent: \"center\",\n\t\t\t\tmargin: \"auto\",\n\t\t\t\tmarginTop: \"5vh\"\n\t\t\t}}\n\t\t\tspacing={1}\n\t\t>\n\t\t\t<Grid item lg={7} md={12} sm={12} style={{ textAlign: \"center\" }}>\n\t\t\t\t<Header transactions={groupedTransactions[thisMonthKey] || []} budget={budget} />\n\t\t\t</Grid>\n\t\t\t<Grid item lg={1} md={12}>\n\t\t\t\t<Chart transactions={transactions} budget={budget} />\n\t\t\t</Grid>\n\t\t\t<Grid\n\t\t\t\tcontainer\n\t\t\t\tspacing={1}\n\t\t\t\titem\n\t\t\t\tlg={8}\n\t\t\t\tmd={8}\n\t\t\t\tstyle={{ marginTop: \"10px\" }}\n\t\t\t>\n\t\t\t\t<AddTransaction addTransaction={addTransaction} />\n\t\t\t</Grid>\n\t\t\t<Grid container spacing={1} lg={8} style={{ marginTop: \"10px\", marginBottom: \"15px\"}}>\n\t\t\t\t<TransactionsContainer groupedTransactions={groupedTransactions} updateTransaction={(transaction) => setEditingTransaction(transaction)} />\n\t\t\t</Grid>\n\t\t\t{editingTransaction && <EditTransactionDialog\n\t\t\t\ttransaction={editingTransaction}\n\t\t\t\tsetEditingTransaction={setEditingTransaction}\n\t\t\t\tupdateTransaction={newTransaction => {\n\t\t\t\t\tsetTransactions(transactions.map(transaction => {\n\t\t\t\t\t\tif (transaction.id !== newTransaction.id) return transaction;\n\t\t\t\t\t\treturn newTransaction;\n\t\t\t\t\t}))\n\t\t\t\t}}\n\t\t\t\tisOpen={!!editingTransaction}\n\t\t\t\thandleClose={() => setEditingTransaction(false)}\n\t\t\t/>}\n\t\t</Grid>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './base.scss';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}